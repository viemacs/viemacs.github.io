<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Designs on Viemacs Notes</title>
    <link>./design/</link>
    <description>Recent content in Designs on Viemacs Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="./design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design</title>
      <link>./design/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>./design/access/</guid>
      <description> Design </description>
    </item>
    
    <item>
      <title>Design</title>
      <link>./design/design-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>./design/design-pattern/</guid>
      <description> Design Pattern 设计模式是经过验证的代码设计经验的总结。其关注点是代码的可重用、易理解、可靠性。
设计模式的基本类型有：创建、结构、行为。
设计原则 设计模式是设计原则的实现，以达到代码的复用和可维护。
 单一职责原则 Single Responsibility Principle
 开闭原则 Open Closed Principle
Software entities should be open for extension, but closed for modification. 模块应对扩展开放，对修改关闭。
 里氏代换原则 Liskov Substitution Principle
子类可代替父类运行。这种代换是继承利用的基础。
 依赖倒转原则 Dependency Inversion Principle
子类代替父类后，程序的行为不变化。这是面向对象设计的标志。
 接口隔离原则 Interface Segregation Principle
各接口间互不影响。每个接口可以做而且仅做自己需要做和应该做的事。不是所有可以做的事都应放到一个接口中。
 合成聚合复用原则 Composite/Aggregate Reuse Principle
应优先使用合成与聚合，而不是继承。合成复用原则是在新对象中使用已有对象，新对象通过向已有对象委派来复用已有功能。使各个类之间的联系尽量少，才好提高扩展性和可维护性。
 迪米特最小知识原则 Principle of Least Knowledge
各个对象对其他对象的了解应尽可能少。
  在解决问题时，设计模式可以帮忙我们在更高的抽象层次上工作。先是对问题的分析，了解问题中的因果关系，看使用模式的先决条件是否满足。然后根据分析给出解决方案。解决方案不是具体的设计和实现，而是对问题做抽象描述，表明如何用元素的组合而解决问题。
创建  单例模式 Singleton 下一个类仅有一个实例和一个全局访问点。要注意单例模式在使用多线程、序列化、类装载器（multi-threading, serialization, class loaders）时的问题。 适用条件: 类只能有一个实例，可以从全局访问；实例可通过子类扩展。 工厂模式 Factory Method 定义一个用于创建对象的接口，由子类确定实例化哪个对象，使类的实例化延后到子类。 适用条件: 一个类希望/需要由其子类来创建对象。 抽象工厂模式 Abstract Factory 不指定具体的类，仅提供一个创建一组相关/相依赖对象的接口。 适用条件: 只提供接口而不是实现。联合使用一系列的对象。 建造者模式 Builder 将（复杂）对象的构建和表示分离，使同样的构建过程可以创建不同的表示。 适用条件: 对象创建的算法应独立于对象，或对不同的对象有不同的表示。 原型模式 Prototype 用原型的实例来指定所创建对象的种类，并通过复制这个原型来创建新的对象。 适用条件: 在运行时才指定实例化的类，如动态装载；类的实例只会是几个不同状态组合中的一种时。  结构  适配器模式 Adapter 将一个类的接口转换成另一个接口，使接口不兼容的类可以一起工作。 适用条件: 使用已存在的类，但接口不合要求；新建可复用的类，与不相关或不可预见的类兼容。 桥接模式 Bridge 将类的抽象部分和实现部分分离，分别独立改变。 适用条件: 装饰模式 Decorator 向对象动态增加额外职责。比生成子类更灵活地扩展一个类的功能。 适用条件: 组合模式 Composite 将对象组合成表达整体与部分关系的树形层次结构，使单个对象和复合对象在使用上一致。 适用条件: 外观模式 Facade 为子系统的一组接口提供一致的界面，定义高层接口，增加子系统的易用性。 适用条件: 享元模式 Flyweight 用共享技术有效支持大量细粒度的对象。 适用条件: 代理模式 Proxy 为其他对象提供代理，用代理来控制对象的访问。 适用条件:  行为  模版模式 Template Method 定义方法中的算法骨架，将部分步骤延后到子类中，使子类不改变算法结构而重定义算法中的某些步骤。 适用条件: 命令模式 Command 将请求封装为对象，？？使用不同请求来对接收者进行参数化？？，可将请求排队、取消、记录日志。 适用条件: 迭代器模式 适用条件: 观察者模式 Observer 在对象间建立一对多的依赖关系，当一个对象改变时，所有依赖于它的对象都自动刷新。 适用条件: 中介者模式 Mediator 封装一系列的对象交互，使各对象不需要显示相互引用，松耦合，并可以独立改变对象间的交互。 适用条件: 备忘录模式 Memento 不破坏对象的封装，捕获对象内部的状态并在对象外部保存，这可将对象恢复到保存时的状态。 适用条件: 解释器模式 Interpreter 定义一个给定语言的文法表示和解释器，来表示解释此语言的语句。 适用条件: 状态模式 State 允许对象在内部状态改变时改变行为，像是对象所属的类发生了变化。 适用条件: 策略模式 Strategy 定义并封装一系列的算法，并使它们可相互替换，使算法变化独立于使用者。 适用条件: 责任链模式 Chain of Responsibility 解耦请求的发送者和接收者。将多个可能处理请求的对象连成一条链，请 适用条件: 求在链上传递，直到有一个对象处理它。 访问者模式 Visitor 表示对一个对象中元素的操作，可以定义作用于元素的新操作而不改变元素的类。 适用条件:  </description>
    </item>
    
    <item>
      <title>Design</title>
      <link>./design/reactive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>./design/reactive/</guid>
      <description>Reactive System 响应式系统，响应式编程 事件驱动实现响应式编程，消息驱动实现响应式系统。
响应式编程强调的是数据流而非控制流。
例子：
 Futures / Promises：值的容器，many-read and single-write 响应式 流：无限制的数据处理流，支持异步，非阻塞，多个源与目的 反压转换管道 Back-pressure transformation pipelines 数据流变量：依赖于输入，过程procedures 或其他单元的 单赋值变量（存储单元）single assignment variables，能够自动更新值的改变。如：表格软件中一个单元格值的改变会影响到所有依赖于它的函数，顺流而下地使它们产生新的值。   JVM 中支持 非阻塞式反压异步流，响应式编程 的流行库有：Akka Streams, Ratpack, Reactor, ExJava, Vert.x
响应式编程的基本好处是：提高多核和多 CPU 硬件的计算资源利用率；通过减少序列化点来提高性能（阿姆达尔定律，古瑟通用可伸缩定律 Amdahl, Guenther）。
响应式编程中，active 活动组件间一般不需要明确的协作，而避开了传统的编程范式的做法：尽力提供一个简单直接的可持续的方法来处理异步非阻塞计算和 I/O。
响应式编程的价值在于组件的创建和工作流的组合。在异步执行上加入反压以避免过度使用/无限度地消耗资源。
为在更高层次上理清一个系统，设计响应式系统，需要为其设计响应式架构。响应式编程仅是一种编程范式，要注意它的适用条件和情形。
 事件驱动与消息驱动
响应式编程的着眼点在短时数据流链条上的计算，因而使用事件驱动；响应式系统关注于通过分布式系统的通信和协作所得到的弹性和韧性，使用消息驱动 messaging。
事件驱动的数据流驱动模型，拥有 long-live addressable 长期存活可寻址 组件的消息驱动系统，两者的不同在于，消息具有固定的导向，事件没有；消息会有一个明确的去向，而事件只是一个等待被观察的信息。消息式结构更适用于异步，因为消息的发送与接收和发送者与接收者是分离的。
 一条消息就是一则被送往一个明确目的地的数据。一个事件则是达到某个给定状态的组件发出的一个信号。在一个消息驱动的系统中，可寻址到的接收者等待消息的到来然后响应它，否则保持休眠状态。在一个事件驱动系统中，通知的监听者被绑定到消息源上，这样当消息被发出时它就会被调用。这意味着一个事件驱动系统专注于可寻址的事件源，而消息驱动系统专注于可寻址的接收者。
 分布式系统需要通过消息在网络上传输进行交流，以实现其沟通基础，而事件的发出则是本地的。常见的做法是在底层通过发送包裹着事件的消息来搭建跨网络的事件驱动系统，这样能维持在分布式环境下事件驱动编程模型的相对简易，可以用在合理范围内的特殊案例上。
分布式环境下的事件驱动在编程模型的抽象性和简易性上有好处，但在控制性上有欠缺。消息强迫我们去拥抱分布式系统的真实性和一致性。你需要去考虑局部错误，错误侦测，丢弃/复制/重排序消息 （partial failures, failure detection, dropped/duplicated/reordered），还有一致性问题，管理多个并发真实性（并发真实性？）。你需要面对它们，处理它们，而不是藏在低劣的抽象层后，假装网络并不存在，像是 EJB, RPC, CORBA, XA。
在设计中，这种语义和适用性上的不同对应用有深刻的影响，包括分布式系统的复杂性中的弹性，韧性，移动性，位置透明和管理。
在使用了响应式编程技术的响应式系统中，有用于沟通的消息，也不呈现现实的事件。</description>
    </item>
    
  </channel>
</rss>