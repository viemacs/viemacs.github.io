<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cs on Viemacs Notes</title>
    <link>./c/</link>
    <description>Recent content in Cs on Viemacs Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="./c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C</title>
      <link>./c/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>./c/access/</guid>
      <description> C </description>
    </item>
    
    <item>
      <title>C</title>
      <link>./c/memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>./c/memory/</guid>
      <description>Memory #include &amp;lt;string.h&amp;gt;int g_a = 0; // global, initialized int* g_p; // global, uninitialized int main() { int a; // stack  char s[] = &amp;#34;ab&amp;#34;; // s: stack, &amp;#34;ab&amp;#34; constant  char *p1; // static  char *p2 = &amp;#34;12&amp;#34;; // p2: stack, &amp;#34;12&amp;#34; constant  static int b = 0;// static  g_p = (char *)malloc(8); // heap  p1 = (char *)malloc(8); // heap  strcpy(g_p, &amp;#34;12&amp;#34;); // &amp;#34;12&amp;#34; constant  // the memory might be optimized by compiler and use the same memory as p2  return 0; } 内存分配方式中的 栈、堆-自由存储区、全局与静态存储区、常量存储区  栈</description>
    </item>
    
  </channel>
</rss>